/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.example.apigateway.api;

import io.example.apigateway.model.Password;
import io.example.apigateway.model.PasswordAndToken;
import io.example.apigateway.model.Token;
import io.example.apigateway.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-06-13T19:17:08.891+01:00[Europe/Lisbon]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Authenticate user", nickname = "authenticateUser", notes = "", response = Token.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Token.class),
        @ApiResponse(code = 401, message = "Invalid username / password") })
    @RequestMapping(value = "/users/{username}/auth",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Token> authenticateUser(@ApiParam(value = "Password", required = true) @Valid @RequestBody Password body, @ApiParam(value = "username associated with the user that requires authentication", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "Confirm user using token received by email", nickname = "confirmUser", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 403, message = "Invalid or expired username/token") })
    @RequestMapping(value = "/users/{username}/confirmation/{token}",
        method = RequestMethod.GET)
    ResponseEntity<Void> confirmUser(@ApiParam(value = "username associated with the user that needs to be confirmed", required = true) @PathVariable("username") String username, @ApiParam(value = "token sent to email", required = true) @PathVariable("token") String token);


    @ApiOperation(value = "Create new user's password. It will send an email to the email associated with the username to enable the user to create a new password.", nickname = "createNewPassword", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Invalid username") })
    @RequestMapping(value = "/users/{username}/password",
        method = RequestMethod.POST)
    ResponseEntity<Void> createNewPassword(@ApiParam(value = "username associated with the user that required the creation of a new password", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "Create user", nickname = "createUser", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created"),
        @ApiResponse(code = 409, message = "User already exists") })
    @RequestMapping(value = "/users",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "Created user object", required = true) @Valid @RequestBody User body);


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{username}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "username associated with the user that needs to be deleted", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "Ask for password renewal form", nickname = "getPasswordRenewalForm", notes = "", response = String.class, tags={ "users", })
    @ApiResponses(value = {@ApiResponse(code = 200, message = "OK", response = String.class)})
    @RequestMapping(value = "/users/{username}/password/{token}",
        produces = { "text/html" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getPasswordRenewalForm(@ApiParam(value = "username associated with the user that wants to renew password", required = true) @PathVariable("username") String username, @ApiParam(value = "token sent to email", required = true) @PathVariable("token") String token);


    @ApiOperation(value = "Get user by username", nickname = "readUser", notes = "", response = User.class, authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "User not found or unconfirmed") })
    @RequestMapping(value = "/users/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> readUser(@ApiParam(value = "The username that needs to be fetched", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "Update user", nickname = "updateUser", notes = "This can only be done by the logged in user.", authorizations = {
        @Authorization(value = "BearerAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/users/{username}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "Updated user object", required = true) @Valid @RequestBody User body, @ApiParam(value = "username associated with the user that needs to be updated", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "Update user's password after receiving token by email", nickname = "updateUserPassword", notes = "", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized") })
    @RequestMapping(value = "/users/{username}/password",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserPassword(@ApiParam(value = "Password and token", required = true) @Valid @RequestBody PasswordAndToken body, @ApiParam(value = "username associated with the user that required the password change", required = true) @PathVariable("username") String username);

}
