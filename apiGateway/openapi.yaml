openapi: 3.0.1
info:
  title: API Gateway for example.io
  contact:
    email: apedroso@outlook.pt
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: users
  description: Operations on users
paths:
  /users:
    post:
      tags:
      - users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        201:
          description: User created
        409:
          description: User already exists
  /users/{username}:
    get:
      tags:
      - users
      summary: Get user by username
      operationId: readUser
      security: 
      - BearerAuth: []
      parameters:
      - name: username
        in: path
        description: The username that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        404:
          description: Not found
    put:
      tags:
      - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      security: 
      - BearerAuth: []
      parameters:
      - name: username
        in: path
        description: username associated with the user that needs to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          applicaton/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: OK
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - users
      summary: Delete user
      description: This can only be done by the logged in user
      operationId: deleteUser
      security: 
      - BearerAuth: []
      parameters:
      - name: username
        in: path
        description: username associated with the user that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        404:
          description: User not found
  /users/{username}/confirmation/{token}:
    get:
      tags:
      - users
      summary: Confirm user using token received by email
      operationId: confirmUser
      parameters: 
      - name: username
        in: path
        description: username associated with the user that needs to be confirmed
        required: true
        schema:
          type: string
      - name: token
        in: path
        description: token sent to email
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        403:
          description: Invalid or expired username/token 
  /users/{username}/password:
    post:
      tags:
      - users
      summary: Create new user's password. It will send an email to the email associated with the username to enable the user to create a new password.
      operationId: createNewPassword
      parameters:
      - name: username
        in: path
        description: username associated with the user that required the creation of a new password
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        401:
          description: Invalid username
    put:
      tags:
      - users
      summary: Update user's password after receiving token by email
      operationId: updateUserPassword
      parameters:
      - name: username
        in: path
        description: username associated with the user that required the password change
        required: true
        schema:
          type: string
      requestBody:
        description: Password and token
        content:
          applicaton/json:
            schema:
              $ref: '#/components/schemas/PasswordAndToken'
        required: true
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
  /users/{username}/password/{token}:
    get:
      tags:
      - users
      summary: Ask for password renewal form
      operationId: getPasswordRenewalForm
      parameters: 
      - name: username
        in: path
        description: username associated with the user that wants to renew password
        required: true
        schema:
          type: string
      - name: token
        in: path
        description: token sent to email
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
  /users/{username}/auth:
    post:
      tags:
      - users
      summary: Authenticate user
      operationId: authenticateUser
      parameters:
      - name: username
        in: path
        description: username associated with the user that requires authentication
        required: true
        schema:
          type: string
      requestBody:
        description: Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Invalid username / password
components:
  schemas:
    Password:
      type: object
      properties:
        password:
          type: string
          format: password
    PasswordAndToken:
      type: object
      properties:
        password:
          type: string
          format: password
        token: 
          type: string
    Token:
      type: object
      properties:
        token: 
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT